"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var Mustache = require("mustache");
var readPkg = require("read-pkg");
var path = require("upath");
var Zip = require('node-zip'); // tslint:disable-line:no-var-requires  no type definitions available
var semver_1 = require("semver");
var tiny_types_1 = require("tiny-types");
var Authenticator = /** @class */ (function () {
    function Authenticator(username, password, permissions) {
        this.username = username;
        this.password = password;
        this.permissions = permissions;
        tiny_types_1.ensure('username', username, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('password', password, tiny_types_1.isString(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        tiny_types_1.ensure('permissions', permissions, tiny_types_1.isArray(), tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
    }
    /**
     * @param {string} username
     * @param {string} password
     * @param {string[]} permissions
     *  See https://developer.chrome.com/extensions/declare_permissions
     */
    Authenticator.for = function (username, password, permissions) {
        if (permissions === void 0) { permissions = ['<all_urls>']; }
        return new Authenticator(username, password, permissions);
    };
    Authenticator.prototype.asBase64 = function () {
        return this.extension().generate({ base64: true, compression: 'DEFLATE' });
    };
    Authenticator.prototype.extension = function () {
        var zip = new Zip();
        var _a = readPkg.sync({ cwd: path.resolve(__dirname, '..') }), name = _a.name, description = _a.description, version = _a.version;
        zip.file('manifest.json', Mustache.render(contentsOf('../extension/manifest.mustache.json'), {
            name: name,
            description: description,
            permissions: this.permissions.map(function (permission) { return "\"" + permission + "\""; }).join(', '),
            version: semver_1.coerce(version).version,
        }));
        zip.file('authenticator.js', Mustache.render(contentsOf('../extension/authenticator.mustache.js'), { username: this.username, password: this.password }));
        return zip;
    };
    return Authenticator;
}());
exports.Authenticator = Authenticator;
function contentsOf(fileName) {
    return fs.readFileSync(path.join(__dirname, fileName)).toString('utf8');
}
//# sourceMappingURL=Authenticator.js.map