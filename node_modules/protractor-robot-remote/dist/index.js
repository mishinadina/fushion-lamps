"use strict";
exports.__esModule = true;
var protractor_1 = require("protractor");
var q = require("q");
var configParser_1 = require("protractor/built/configParser");
var plugins_1 = require("protractor/built/plugins");
var robotremote_1 = require("robotremote");
var server;
var runner;
// load protractor config
var configParser = new configParser_1.ConfigParser();
configParser.addFileConfig('protractor.conf.js');
var config = configParser.getConfig();
var stopRemoteServer = function () {
    if (server) {
        return server.stopRemoteServer();
    }
};
var startProtractor = function () {
    runner = new protractor_1.Runner(config);
    // TODO This code was copied from the Protractor launcher script. Find a more elegant way to do this.
    q(runner.ready_)
        .then(function () {
        // 1) Setup environment
        // noinspection JSValidateTypes
        return runner.driverprovider_.setupEnv();
    })
        .then(function () {
        // 2) Create a browser and setup globals
        var browser_ = runner.createBrowser(new plugins_1.Plugins(config));
        runner.setupGlobals_(browser_);
        return browser_.ready.then(browser_.getSession)
            .then(function (session) {
            // logger.debug(
            //   'WebDriver session successfully started with capabilities ' +
            //   util.inspect(session.getCapabilities()));
        }, function (err) {
            // logger.error('Unable to start a WebDriver session.');
            throw err;
        });
    });
};
var stopProtractor = function () {
    if (runner) {
        runner.shutdown_();
    }
};
exports.serverLib = {
    stopRemoteServer: stopRemoteServer,
    startProtractor: startProtractor,
    stopProtractor: stopProtractor
};
function runProtractorRobotServer(libraries, options) {
    if (options === void 0) { options = { host: 'localhost', port: 8270, allowStop: true }; }
    server = new robotremote_1.Server([exports.serverLib].concat(libraries), options);
}
exports.runProtractorRobotServer = runProtractorRobotServer;
function keyword(fn, doc, args, tags) {
    var keyword = fn;
    keyword.doc = doc;
    keyword.args = args;
    keyword.tags = tags;
    return keyword;
}
exports.keyword = keyword;
